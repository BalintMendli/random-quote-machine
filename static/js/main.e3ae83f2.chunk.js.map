{"version":3,"sources":["components/Quote.js","components/ButtonBox.js","constants/colors.js","utils.js","components/App.js","registerServiceWorker.js","index.js"],"names":["Quote","props","state","animate","this","setState","prevProps","color","quote","author","id","className","onAnimationEnd","style","icon","faQuoteLeft","size","React","Component","ButtonBox","init","setTimeout","changeQuote","backgroundColor","href","encodeURIComponent","target","rel","type","faTwitter","faTumblr","onClick","getRandomElement","arr","Math","floor","length","random","randomQuoteAndColor","quotes","colors","App","bind","bodyAttributes","class","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e3ae83f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Quote extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { animate: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ animate: true });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { color, quote } = this.props;\r\n    if (prevProps.color !== color || prevProps.quote !== quote) {\r\n      this.setState({ animate: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { color, quote, author } = this.props;\r\n    const { animate } = this.state;\r\n    return (\r\n      <>\r\n        <div id=\"text-div\">\r\n          <div\r\n            id=\"text\"\r\n            className={\r\n              animate ? 'color-transition fade-in' : 'color-transition'\r\n            }\r\n            onAnimationEnd={() => this.setState({ animate: false })}\r\n            style={{ color }}\r\n          >\r\n            <FontAwesomeIcon\r\n              icon={faQuoteLeft}\r\n              color={color}\r\n              size=\"sm\"\r\n              id=\"quote-icon\"\r\n              className=\"color-transition\"\r\n            />\r\n            {quote}\r\n          </div>\r\n        </div>\r\n        <div\r\n          id=\"author\"\r\n          className={animate ? 'color-transition fade-in' : 'color-transition'}\r\n          style={{ color }}\r\n        >\r\n          - {author}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nQuote.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  quote: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Quote;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ButtonBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { init: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => this.setState({ init: false }), 0);\r\n  }\r\n\r\n  render() {\r\n    const { quote, author, color, changeQuote } = this.props;\r\n    const { init } = this.state;\r\n    const backgroundColor = init ? '#fff' : color;\r\n    return (\r\n      <div id=\"button-box\">\r\n        <div id=\"social\">\r\n          <a\r\n            href={`https://twitter.com/intent/tweet?hashtags=quotes&text=${encodeURIComponent(\r\n              `\"${quote}\" ${author}`,\r\n            )}`}\r\n            id=\"tweet-quote\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"button color-transition\"\r\n              style={{ backgroundColor }}\r\n            >\r\n              <FontAwesomeIcon icon={faTwitter} size=\"lg\" color=\"#ffffff\" />\r\n            </button>\r\n          </a>\r\n          <a\r\n            href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption=${encodeURIComponent(\r\n              author,\r\n            )}&content=${encodeURIComponent(\r\n              quote,\r\n            )}&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`}\r\n            id=\"tumblr\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"button color-transition\"\r\n              style={{ backgroundColor }}\r\n            >\r\n              <FontAwesomeIcon icon={faTumblr} size=\"lg\" color=\"#ffffff\" />\r\n            </button>\r\n          </a>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          id=\"new-quote\"\r\n          className=\"button color-transition\"\r\n          onClick={changeQuote}\r\n          style={{ backgroundColor }}\r\n        >\r\n          New quote\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nButtonBox.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  quote: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  changeQuote: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ButtonBox;\r\n","export default [\n  '#16a085',\n  '#27ae60',\n  '#2c3e50',\n  '#f39c12',\n  '#e74c3c',\n  '#9b59b6',\n  '#FB6964',\n  '#342224',\n  '#472E32',\n  '#BDBB99',\n  '#77B1A9',\n  '#73A857',\n];\n","export function getRandomElement(arr) {\n  const n = Math.floor(arr.length * Math.random());\n  return arr[n];\n}\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Helmet from 'react-helmet';\r\nimport Quote from './Quote';\r\nimport ButtonBox from './ButtonBox';\r\nimport quotes from '../constants/quotes.json';\r\nimport colors from '../constants/colors';\r\nimport { getRandomElement } from '../utils';\r\n\r\nfunction randomQuoteAndColor() {\r\n  const quote = getRandomElement(quotes.quotes);\r\n  return {\r\n    quote: quote.quote,\r\n    author: quote.author,\r\n    color: getRandomElement(colors),\r\n  };\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = randomQuoteAndColor();\r\n    this.changeQuote = this.changeQuote.bind(this);\r\n  }\r\n\r\n  changeQuote() {\r\n    this.setState(randomQuoteAndColor());\r\n  }\r\n\r\n  render() {\r\n    const { color, quote, author } = this.state;\r\n    return (\r\n      <main className=\"App\">\r\n        <Helmet\r\n          bodyAttributes={{\r\n            style: `background-color : ${color}`,\r\n            class: 'color-transition',\r\n          }}\r\n        />\r\n        <section id=\"quote-box\">\r\n          <Quote quote={quote} author={author} color={color} />\r\n          <ButtonBox\r\n            quote={quote}\r\n            author={author}\r\n            changeQuote={this.changeQuote}\r\n            color={color}\r\n          />\r\n        </section>\r\n        <footer className=\"footer\">\r\n          by <a href=\"https://zenott.github.com\">zenott</a>\r\n        </footer>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}